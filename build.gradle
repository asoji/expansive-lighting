plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
	id 'org.ajoberstar.grgit' version '5.2.0'
}

archivesBaseName = "${project.archives_base_name}-mc${libs.versions.minecraft.get()}"
version = version = getVersion()
group = project.maven_group

repositories {
	maven { url "https://api.modrinth.com/maven" }
	maven { url "https://maven.terraformersmc.com/" }
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft

	mappings loom.officialMojangMappings()
	modImplementation libs.quilt.loader

	modImplementation libs.quilted.fabric.api
	modImplementation libs.bundles.dependencies
	modLocalRuntime(libs.bundles.dev.mods) { exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api"; exclude group: "net.fabricmc.loader" }
}

processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

task buildOrPublish {
	group = "build"
	String mavenUser = System.getenv().MAVEN_USER
	if (mavenUser != null && !mavenUser.isEmpty()) {
		dependsOn(tasks.getByName("publish"))
		println("Prepared To Publish to Maven")
	} else {
		dependsOn(tasks.getByName("build"))
		println("Prepared to Build")
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId project.maven_group
			artifactId "${project.archives_base_name}"
			version getVersion()
			from components.java
		}
	}

	repositories {
		maven {
			url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
			credentials {
				username = System.getenv().MAVEN_USER
				password = System.getenv().MAVEN_PASS
			}
			authentication { basic(BasicAuthentication) }
		}
	}
}

String getVersion() {
	def mod_version = project.mod_version
	def build_id = System.getenv("GITHUB_RUN_NUMBER")

	// CI builds only
	if (build_id != null) {
		return "${mod_version}+build.${build_id}"
	}

	if (grgit != null) {
		def head = grgit.head()
		def id = head.abbreviatedId

		// Flag the build if the build tree is not clean
		if (!grgit.status().clean) {
			id += "-dirty"
		}

		return "${mod_version}+rev.${id}"
	}

	// No tracking information could be found about the build
	return "${mod_version}+unknown"

}
